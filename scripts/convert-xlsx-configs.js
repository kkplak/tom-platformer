#!/usr/bin/env node

const excelToJson = require('convert-excel-to-json');
const fs = require('fs');
const path = require('path');

// [TODO] loop through and find files or read from config
/*const configFiles = {
    'en-US': 'public/static/media/video/PowerUp-Settings (Beats).xlsm',
    'es-ES': 'public/static/media/video/es-ES/PowerUp-Settings.xlsm',
    'pt-PT': 'public/static/media/video/pt-PT/PowerUp-Settings.xlsm'
};*/

let configFiles = [],
  parentDir,
  fileObj;

function fromDir(startPath, filter) {
  //console.log('Starting from dir '+startPath+'/');

  if (!fs.existsSync(startPath)) {
    console.log('no dir ', startPath);
    return;
  }

  var files = fs.readdirSync(startPath);
  for (var i = 0; i < files.length; i++) {
    var filename = path.join(startPath, files[i]);
    var stat = fs.lstatSync(filename);
    const baseFilename = path.basename(filename);
    const ext = filename.split('.').pop();

    if (stat.isDirectory()) {
      const fileNameSplit = filename.split(path.sep);
      parentDir = fileNameSplit[fileNameSplit.length - 2];
      console.log(`parentDir: ${parentDir}`);
      fromDir(filename, filter); //recurse
    } else if (baseFilename.startsWith('~') && baseFilename.endsWith(filter)) {
      console.log(
        `Ignore temp xlsm file ${baseFilename} generated by having excel open at launch`
      );
    } else if (filename.indexOf(filter) >= 0) {
      console.log('-- found: ', filename);
      fileObj = {
        [parentDir]: filename,
      };
      console.log(Object.entries(fileObj));
      configFiles.push(fileObj);
    }
  }
}

fromDir('./public/static/media/', '.xlsm');

configFiles.forEach((sourceFileObj) => {
  for (const [locale, sourceFile] of Object.entries(sourceFileObj)) {
    console.log(`${locale}: ${sourceFile}`);
    const filename = path.basename(
      sourceFile,
      '.xlsm'
    ); /*.substring(sourceFile.lastIndexOf('/')+1, sourceFile.lastIndexOf("."))*/
    var basePath = path.dirname(sourceFile).replace('/xlsm', '/json');
    //var basePath = 'src/settings';

    const destFile = path.join(basePath, `${filename}-${locale}.json`);
    console.log(sourceFile, basePath, destFile);

    const result = excelToJson({
      sourceFile: sourceFile,
      columnToKey: { '*': '{{columnHeader}}' },
      header: { rows: 1 },
    });

    fs.writeFileSync(destFile, JSON.stringify(result));
  }
});
